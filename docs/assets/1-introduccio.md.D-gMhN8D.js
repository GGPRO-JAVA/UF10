import{_ as a,c as i,o as s,a4 as r}from"./chunks/framework.BBFrlU1d.js";const p=JSON.parse('{"title":"1. Introducció","description":"","frontmatter":{},"headers":[],"relativePath":"1-introduccio.md","filePath":"1-introduccio.md"}'),t={name:"1-introduccio.md"};function n(o,e,c,d,l,m){return s(),i("div",null,e[0]||(e[0]=[r('<h1 id="_1-introduccio" tabindex="-1">1. Introducció <a class="header-anchor" href="#_1-introduccio" aria-label="Permalink to &quot;1. Introducció&quot;">​</a></h1><p>La funció principal de qualsevol aplicació informàtica és la <strong>manipulació i transformació de dades</strong>. Aquestes dades poden representar conceptes molt diversos segons el context: notes d&#39;estudiants, registres meteorològics, cites d&#39;un calendari, etc. Les possibilitats són infinites. Per a dur a terme aquestes operacions, el programa sol emmagatzemar la informació en variables dins de la memòria i aplicar‐hi tant operadors bàsics com mètodes especialitzats.</p><p>El problema és que les variables només tenen <strong>vigència</strong> mentre l&#39;aplicació s&#39;executa: quan el programa finalitza, totes les dades es perden. Açò pot ser acceptable quan treballem amb dades literals o amb entrades interactives puntuals, però esdevé inviable si cada sessió haguérem de reintroduir, per exemple, les notes de centenars d&#39;estudiants.</p><p>Per tant, sovint cal <strong>persistir</strong> la informació en algun mitjà extern. de manera que es mantinga disponible entre diferents execucions o fins i tot després d&#39;apagar l&#39;ordinador.</p><p>La forma més senzilla d&#39;aconseguir-ho és aprofitar el <strong>sistema d&#39;arxius</strong> del sistema operatiu. Gràcies a ell, podem escriure i llegir fitxers en formats senzills (text, CSV, JSON, XML…) o en formats binaris, sense preocupar‐nos del suport físic (disc dur, unitat USB, memòria externa, etc.).</p><p>A més del maneig de fitxers i directoris, un altre recurs molt útil és la <strong>serialització d&#39;objectes</strong>, que permet convertir objectes de la memòria en una seqüència de bytes i tornar‐los a reconstruir més endavant. D&#39;aquesta manera, podem guardar l&#39;estat complet d&#39;una instància i recuperar‐la de forma íntegra en una nova execució.</p><p>En aquesta unitat didàctica veurem:</p><ul><li>Operacions bàsiques sobre el sistema d&#39;arxius: creació, lectura, escriptura i eliminació de fitxers i directoris.</li><li>Formats de dades textuals i binaris per a emmagatzemar informació.</li><li>Tècniques de serialització d&#39;objectes per a fer persistència de l&#39;estat de les nostres instàncies.</li></ul><p>Amb aquests mecanismes podrem dissenyar aplicacions que guarden i recuperen dades de manera eficient i segura, garantint la <strong>persistència</strong> i la <strong>continuïtat</strong> de la informació tractada.</p>',9)]))}const g=a(t,[["render",n]]);export{p as __pageData,g as default};
